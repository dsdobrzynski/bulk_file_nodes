<?php
/**
 * Implements hook_bpn_upload().
 *
 * Defines a multi-step form to use with bulk_photo_nodes.
 */
function bpn_flickr_bpn_upload() {
  return 'bpn_flickr_form';
}

/**
 *
 */
function bpn_flickr_form($form, &$form_state) {
  if (empty($form_state['step'])) {
    $form_state['step'] = 1;
  }

  $form_callback = 'bpn_flickr_form_step_' . $form_state['step'];
  if (function_exists($form_callback)) {
    return call_user_func($form_callback, $form, $form_state);
  }
}

/**
 * Form constrcutor for Step 1: Select flickr user.
 *
 * @see bpn_flickr_form_step_1_validate().
 */
function bpn_flickr_form_step_1($form, &$form_state) {
  $form['flickr'] = array(
    '#prefix' => '<div class="flickr">',
    '#suffix' => '</div>'
  );
  $form['flickr']['header'] = array(
    '#markup' => '<h3>Flickr</h3>',
  );
  $form['flickr']['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#description' => t('Enter the username to request images from.')
  );
  $form['flickr']['next'] = array(
    '#type' => 'submit',
    '#value' => t('Next')
  );
  $form['#validate'] = array('bpn_flickr_form_step_1_validate');
  return $form;
}

/**
 * Form validation handler for bpn_flickr_form_step_1().
 */
function bpn_flickr_form_step_1_validate($form, &$form_state) {
  $flickr = bpn_flickr_get_api();
  dpm($form_state);
  $user = bpn_flickr_get_user($form_state['values']['username']);
  if (empty($user)) {
    form_set_error('username', $flickr->getErrorMsg());
  }
}

/**
 * Step 2: Pick what images to load
 */
function bpn_flickr_form_step_2($form, &$form_state) {
  $form['#bpn_chosen_form'] = array(
    '#type' => 'value',
    '#value' => TRUE,
  );
  $form['photo_container_selector'] = array(
    '#type' => 'fieldset',
  );

  // flickr options
  $flickr = bpn_flickr_get_api();
  $user = bpn_flickr_get_user($form_state['flickr_username']);

  // get photosets
  $sets = bpn_flickr_get_sets($user);
  $photosets = array();
  if (!empty($sets)) {
    foreach ($sets['photoset'] as $photoset) {
      if ($photoset['photos'] > 0) {
        $photosets[$photoset['id']] = $photoset['title'];
      }
    }
  }
  sort($photosets);

  // get popular tags
  $tags = bpn_flickr_get_popular_tags($user);
  $tagOptions = array();
  foreach($tags as $tag) {
    $tagOptions[$tag['_content']] = $tag['_content'];
  }
  sort($tagOptions);

  $form['photo_container_selector']['photo_container_type'] = array(
    '#type' => 'select',
    '#options' => array(
      t('Photos') => array(
        'photostream' => 'Photostream'
      ),
      t('Sets') => $photosets,
      t('Tags') => $tagOptions
    ),
    '#title' => 'View photos from:'
  );

  $form['photo_container_photos']['photostream'] = array(
    '#type' => 'container',
  );

  // get photos from photostream.
  $photos = bpn_flickr_get_photos($user);
  if (!empty($photos)) {
    foreach ($photos['photos']['photo'] as $key => $photo) {
      $id = $photo['id'];
      $form['photo_container_photos']['photostream'][$id] = array(
        '#type' => 'checkbox',
        '#prefix' => theme('image', array('path' => $photo['url_s'])),
        '#title' => $photo['title'],
      );
    }
  }
  return $form;
}

/**
 * Flickr submit handler
 */
function bpn_flickr_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  if (isset($form_state['values']['username']) && !empty($form_state['values']['username'])) {
    $form_state['flickr_username'] = $form_state['values']['username'];
    $form_state['step'] = 2;
  }
}

/**
 * Get the Flickr API object for use in API calls
 * @return object The PHP Flickr object
 */
function bpn_flickr_get_api() {
  $flickr = &drupal_static(__FUNCTION__);
  if (!isset($flickr)) {
    $flickr = flickrapi_phpFlickr();
  }
  return $flickr;
}

/**
 * Get the popular tags for a user
 * @param  array $user
 */
function bpn_flickr_get_popular_tags($user) {
  $flickr = bpn_flickr_get_api();
  return $flickr->tags_getListUserPopular($user['nsid'], 25);
}

/**
 * Get the photosets for a user
 */
function bpn_flickr_get_sets($user) {
  $flickr = bpn_flickr_get_api();
  return $flickr->photosets_getList($user['nsid']);
}

/**
 * Wrapper for PHPFlickr::people_findByUsername
 */
function bpn_flickr_get_user($username) {
  $flickr = bpn_flickr_get_api();
  return $flickr->people_findByUsername($username);
}

/**
 * Get photos from a user's photostream.
 */
function bpn_flickr_get_photos($user) {
  $flickr = bpn_flickr_get_api();
  $options = array(
    'user_id' => $user['nsid'],
    'safe_search' => NULL,
    'extras' => 'url_s',
    'per_page' => 30,
  );
  extract($options);
  return $flickr->people_getPublicPhotos($user_id, $safe_search, $extras, $per_page);
}
