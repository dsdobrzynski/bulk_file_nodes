<?php
/**
 * @file
 * hooks and helper functions for bulk photo node.
 */

/**
 * Implements hook_permission().
 */
function bulk_photo_nodes_permission() {
  return array(
    'create bulk photo nodes' => array(
      'title' => t('Create bulk photo nodes'),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function bulk_photo_nodes_menu_alter(&$items) {
  $bpn_var = variable_get('bulk_photo_node_types');
  if (!empty($bpn_var)) {
    foreach ($bpn_var as $node_type => $image_field) {
      $node_type = strtr($node_type, '_', '-');
      $items["node/add/$node_type"]['page callback'] = 'bulk_photo_node_page';
      $items['access arguments'] = array('create bulk photo nodes');
      $items["node/add/$node_type"]['page arguments'] = array(2);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function bulk_photo_nodes_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $form['bulk_photo_nodes'] = array(
    '#tree' => TRUE,
    '#type' => 'fieldset',
    '#group' => 'additional_settings',
    '#title' => 'Bulk Photo Node Settings',
  );
  $form['bulk_photo_nodes']['image_field'] = array(
    '#type' => 'select',
    '#title' => 'Choose a field for the image',
    '#default_value' => bulk_photo_nodes_get_image_field($form['#node_type']->type),
    '#options' => bulk_photo_nodes_get_image_fields($form['#node_type']->type),
  );
  $form['#submit'][] = 'bulk_photo_nodes_submit';
}

/**
 * Form submission handler for bulk_photo_nodes_form_node_type_form_alter.
 */
function bulk_photo_nodes_submit($form, &$form_state) {
  $image_field = $form_state['values']['bulk_photo_nodes']['image_field'];
  $node_type = $form['#node_type']->type;
  if (!empty($image_field)) {
    // If the user has selected a value.
    $bpn_var = variable_get('bulk_photo_node_types');
    if ($image_field == 'none') {
      if (is_array($bpn_var) && array_key_exists($node_type, $bpn_var)) {
        unset($bpn_var[$node_type]);
      }
    }
    else {
      $bpn_var[$node_type] = $image_field;
    }
    variable_set('bulk_photo_node_types', $bpn_var);
    // menu_rebuild();
    drupal_set_message("Bulk photo node settings saved.");
  }
}

/**
 * Returns a list of image fields for a given content type.
 *
 * @param string $node_type
 *   The name of the content type
 *
 * @return array
 *   An associative array where key = machine name, value = field label
 */
function bulk_photo_nodes_get_image_fields($node_type) {
  $image_fields = array(
    'none' => '- None -',
  );
  $fields_info = field_info_instances('node', $node_type);
  foreach ($fields_info as $field_name => $field_value) {
    $field_info = field_info_field($field_name);
    $type = $field_info['type'];
    if ($type == 'image') {
      $image_fields[$field_name] = $field_value['label'];
    }
  }
  return $image_fields;
}

/**
 * Indicates if a given content type is being used as bulk photo nodes.
 *
 * @param string $node_type
 *   The machine name of a content_type.
 *
 * @return string
 *   The machine name of the image field or FALSE if the content type isn't used
 */
function bulk_photo_nodes_get_image_field($node_type) {
  $bpn_var = variable_get('bulk_photo_node_types');
  if (is_array($bpn_var)) {
    return (array_key_exists($node_type, $bpn_var)) ? $bpn_var[$node_type] : 'none';
  }
}

/**
 * Page callback: Displays the first step of the bulk photo node upload form.
 *
 * In case the user would like to see the normal node/add form, simply supply
 * a query string of ?override=1
 *
 * @param string $node_type
 *   The content type of the node, used in case of an override.
 *
 * @return array
 *   A render array for the page.
 *
 * @see bulk_photo_nodes_menu_alter()
 */
function bulk_photo_node_page($node_type) {
  if (bulk_photo_nodes_is_bpn_add_page()) {
    $content = array();
    $forms = module_invoke_all('bulk_photo_nodes_method');
    foreach ($forms as $form) {
      $content['forms'][] = drupal_get_form($form);
    }
    return $content;
  }
  else {
    $form = node_add($node_type);
    return $form;
  }
}

/**
 * Implements hook_page_alter().
 */
function bulk_photo_nodes_page_alter(&$page) {
  $chosen_form = NULL;
  if (bulk_photo_nodes_is_bpn_add_page() && user_access('create bulk photo nodes')) {
    foreach ($page['content']['system_main']['forms'] as $key => $form) {
      if (array_key_exists('#bpn_chosen_form', $form)) {
        $chosen_form = $key;
      }
      // @todo: This is ugly with two foreach loops.
      foreach ($page['content']['system_main']['forms'] as $key => $form) {
        if (isset($chosen_form) && $key != $chosen_form) {
          unset($page['content']['system_main']['forms'][$key]);
        }
      }
    }
  }
}

/**
 * Determines if the current node add form is used by bulk photo nodes.
 *
 * @return bool
 *   TRUE if the current node add form  is used by bpn, FALSE otherwise.
 */
function bulk_photo_nodes_is_bpn_add_page() {
  $query = drupal_get_query_parameters();
  if (!is_array($query) || !array_key_exists('override', $query)) {
    $bpn_var = variable_get('bulk_photo_node_types');
    if (!empty($bpn_var)) {
      foreach ($bpn_var as $node_type => $image_field) {
        $node_type = strtr($node_type, '_', '-');
        if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == $node_type) {
          return TRUE;
        }
      }
    }
  }
  return FALSE;
}

/**
 * Form constructor for final step of bpn_multistep_form().
 *
 * @ingroup forms
 */
function bulk_photo_nodes_add_form($form, &$form_state) {
  drupal_set_title(t('Bulk Add Info'));
  $form = array();
  $form['#bpn_chosen_form'] = array(
    '#type' => 'value',
    '#value' => TRUE,
  );
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'bulk_photo_nodes') . '/css/bulk_photo_nodes_default.css',
  );
  $form['nodes'] = array(
    '#tree' => TRUE,
    '#type' => 'fieldset',
    '#collapsed' => FALSE,
    '#prefix' => '<div id="bpn-nodes">',
    '#suffix' => '</div>',
    '#attributes' => array(
      'class' => array(
        'bpn-left bpn-info clearfix',
      ),
    ),
  );
  foreach ($form_state['saved_files'] as $key => $file) {
    $vars = array(
      'style_name' => 'bulk_photo_nodes',
      'path' => $file->uri,
      'attributes' => array('class' => 'bpn-info-node-image'),
    );
    $node = new stdClass();
    $node_type = bulk_photo_nodes_form_get_type();
    $node->type = $node_type;
    node_object_prepare($node);
    $markup = theme('image_style', $vars);
    $form['nodes'][$key] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
      '#collapsed' => FALSE,
      '#attributes' => array(
        'class' => array(
          'bpn-info-node',
        ),
      ),
    );
    $form['nodes'][$key]['left'] = array(
      '#type' => 'container',
      '#collapsed' => FALSE,
      '#attributes' => array(
        'class' => array(
          'bpn-info-node-left clearfix',
        ),
      ),
    );
    $form['nodes'][$key]['left']['image'] = array(
      '#type' => 'markup',
      '#markup' => $markup,
    );
    $form['nodes'][$key]['left']["delete_{$key}"] = array(
      '#type' => 'submit',
      '#value' => 'Delete',
      '#name' => $key,
      '#limit_validation_errors' => array(),
      '#submit' => array('bulk_photo_nodes_delete_node'),
      '#attributes' => array(
        'class' => array(
          'bpn-info-node-delete',
        ),
      ),
    );
    $form['nodes'][$key]['right'] = array(
      '#type' => 'fieldset',
      '#parents' => array(
        'nodes', $key, 'right',
      ),
      '#attributes' => array(
        'class' => array(
          'bpn-info-node-right clearfix',
        ),
      ),
    );
    $form['nodes'][$key]['right']['node'] = array(
      '#type' => 'fieldset',
      '#title' => 'Edit Additional Info',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#parents' => array(
        'nodes', $key, 'right', 'node',
      ),
      '#attributes' => array(
        'class' => array(
          'bpn-info-node-additional',
        ),
      ),
      '#weight' => 10,
    );
    // Manually add a title form item since it's not a field.
    $form['nodes'][$key]['right']['title'] = array(
      '#type' => 'textfield',
      '#title' => 'Title',
      '#default_value' => 'testtitle',
      '#required' => TRUE,
      '#weight' => -10,
      '#attributes' => array(
        'class' => array(
          'bpn-info-node-title',
        ),
      ),
    );

    // Attach all fields found in the node form.
    field_attach_form('node', $node, $form['nodes'][$key]['right']['node'], $form_state);

    // Manually attach file from plupload.
    $image_field = bulk_photo_nodes_get_image_field($node_type);
    unset($form['nodes'][$key]['right']['node'][$image_field]);
    $form['nodes'][$key]['right']['node'][$image_field]['und'][0]['#type'] = 'value';
    $form['nodes'][$key]['right']['node'][$image_field]['und'][0]['#value'] = (array) $file;

    // Move body field around to proper fieldset.
    $form['nodes'][$key]['right']['body'] = $form['nodes'][$key]['right']['node']['body'];
    $form['nodes'][$key]['right']['node']['body']['#weight'] = 0;
    unset($form['nodes'][$key]['right']['node']['body']);
    // bulk_photo_nodes_recursive_set_optional($form['nodes'][$key]['right']['node']);
  }
  $form['override_fields'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
    '#attributes' => array(
      'class' => array(
        'bpn-right clearfix',
      ),
    ),
  );
  $form['override_fields']['fields'] = array(
    '#parents' => array(
      'override_fields', 'fields',
    ),
  );
  $form['override_fields']['fields']['title_display'] = array(
    '#markup' => '<h2>Bulk Settings</h2><p>(applies to all photos, unless overridden)</p>',
    '#weight' => -10,
  );
  field_attach_form('node', $node, $form['override_fields']['fields'], $form_state);
  unset($form['override_fields']['fields'][$image_field]);
  $form['override_fields']['finish'] = array(
    '#type' => 'submit',
    '#value' => t('Finish'),
  );
  // $form['override_fields']['finish']['#validate'] = array('bulk_photo_nodes_add_form_validate');
  $form['override_fields']['finish']['#submit'][] = 'bulk_photo_nodes_add_form_submit';
  // bulk_photo_nodes_recursive_set_optional($form['override_fields']['fields'], $form_state);
  // bulk_photo_nodes_recursive_ajax($form['override_fields']['fields']);
  return $form;
}

/**
 * Form submission handler for bulk_photo_nodes_add_form().
 */
function bulk_photo_nodes_add_form_submit($form, &$form_state) {
  // Convenience short aliases.
  $node_type = $form_state['node_type'];
  $nodes =& $form_state['values']['nodes'];
  $node_overrides =& $form_state['values']['override_fields']['fields'];
  $node_count = 0;
  foreach ($nodes as $key => $outer_node) {
    if (bulk_photo_nodes_save_node($node_type, $outer_node, $node_overrides)) {
      $node_count++;
    }
  }
  $image_style = image_style_load('bulk_photo_nodes');
  image_style_flush($image_style);
  drupal_set_message("$node_count Photos saved successfully");
}

/**
 * Deletes an individual bulk photo node.
 */
function bulk_photo_nodes_delete_node($form, &$form_state) {
  $key = $form_state['triggering_element']['#name'];
  file_delete($form_state['saved_files'][$key]);
  unset($form_state['saved_files'][$key]);
  $form_state['removal'] = $key;
  $form_state['rebuild'] = TRUE;
}

/**
 * Saves an individual bulk photo node.
 *
 * @param string $node_type
 *   The content type of the node.
 *
 * @param array $node_fields
 *   The fields of the given node.
 *
 * @param array $node_overrides
 *   Fields that will override $node_fields if they are empty.
 *
 * @return bool
 *   TRUE if the node was saved successfully, FALSE otherwise.
 */
function bulk_photo_nodes_save_node($node_type, $node_fields, $node_overrides) {
  $node_fields['right']['node']['body'] = $node_fields['right']['body'];
  $node_fields['right']['node']['title'] = $node_fields['right']['title'];
  unset($node_fields['right']['body']);
  unset($node_fields['right']['title']);
  // Prepare a new node for saving.
  $node = new stdClass();
  $node->type = $node_type;
  $node->language = LANGUAGE_NONE;
  node_object_prepare($node);
  // Move the file from public to field-defined destination.
  $options = bulk_photo_nodes_get_file_info($node_type);
  $field_name = $options['field_name'];
  $image_field = (object) $node_fields['right']['node'][$field_name][LANGUAGE_NONE][0];
  $extension = pathinfo($image_field->filename, PATHINFO_EXTENSION);
  $query_string = "SELECT COUNT(nid) FROM {node} WHERE type = :node_type AND uid = :uid";
  $images_count = db_query($query_string, array(
    ':node_type' => $node_type, ':uid' => $image_field->uid,
  ))->fetchField();
  $destination = $options['scheme'] . $options['directory'] . $image_field->uid . '_' . $images_count . '.' . $extension;
  file_move($image_field, $destination);

  foreach ($node_fields['right']['node'] as $field_name => $field_values) {
    // Iterate through fields. Convert form values to properties of the node.
    $node->$field_name = $field_values;
    if (!empty($field_values[LANGUAGE_NONE]) && count($field_values[LANGUAGE_NONE]) > 1) {
      // This is a mult-value field. Iterate through it.
      foreach ($field_values[LANGUAGE_NONE] as $key => $field) {
        if (!empty($field['value'])) {
          if (!empty($node_overrides[$field_name][LANGUAGE_NONE][$key])) {
            $node->$field_name[LANGUAGE_NONE][$key] = $node_overrides[$field_name][LANGUAGE_NONE][$key];
          }
        }
      }
    }
    elseif (!empty($field_values[LANGUAGE_NONE]) && count($field_values[LANGUAGE_NONE]) == 1) {
      // This is a single value field.
      if (!empty($node_overrides[$field_name][LANGUAGE_NONE][0]['value'])) {
        $node->$field_name = $node_overrides[$field_name];
      }
    }
  }
  node_save($node);
  return (!empty($node->nid)) ? TRUE : FALSE;
}

/**
 * Gets the name of the current content type and returns it as a form element.
 *
 * @return array
 *  A #value comprised of the current content type.
 *
 * @todo:
 * Figure out why this doesn't work with AJAX!!!
 */
function bulk_photo_nodes_form_get_type() {
  // @todo this looks bad, lets use something else to get the node type.
  $node_type = strtr(arg(2), '-', '_');
  return $node_type;
}

/**
 * Gets configuration options of the image field used by bulk_photo_nodes.
 *
 * @param string $node_type
 *   The machine of the content type used by bulk_photo_nodes.
 *
 * @return array
 *   Various configuration options for the image field used.
 */
function bulk_photo_nodes_get_file_info($node_type) {
  $options = array();
  $options['field_name'] = bulk_photo_nodes_get_image_field($node_type);
  $options['field_info'] = field_info_field($options['field_name']);
  $options['instance_info'] = field_info_instance('node', $options['field_name'], $node_type);
  $options['scheme'] = $options['field_info']['settings']['uri_scheme'] . '://';
  $options['directory'] = $options['instance_info']['settings']['file_directory'] . '/';
  return $options;
}

/**
 * Adds an #ajax property recursively to all elements of a form.
 *
 * @param array $element
 *   The first element to recursively apply #ajax to.
 */
function bulk_photo_nodes_recursive_ajax(&$element) {
  if (element_children($element)) {
    foreach (element_children($element) as $child) {
      bulk_photo_nodes_recursive_ajax($element[$child]);
    }
    $element['#ajax'] = array(
      'wrapper' => 'bpn-nodes',
      'callback' => 'bulk_photo_nodes_add_form_ajax',
    );
  }
  else {
    $element['#ajax'] = array(
      'wrapper' => 'bpn-nodes',
      'callback' => 'bulk_photo_nodes_add_form_ajax',
    );
  }
}

/**
 * Sets the #required to FALSE recurvisely to all elements of a form.
 *
 * @param array $element
 *   The first element to recursively set #required = FALSE.
 */
function bulk_photo_nodes_recursive_set_optional(&$element) {
  if (element_children($element)) {
    foreach (element_children($element) as $child) {
      bulk_photo_nodes_recursive_set_optional($element[$child]);
    }
    $element['#required'] = FALSE;
    $element['#element_validate'] = array();
  }
  else {
    $element['#required'] = FALSE;
    $element['#element_validate'] = array();
  }
}

/**
 * Sets the #required to TRUE recurvisely to all elements of a form.
 *
 * @param array $element
 *   The first element to recursively set #required = TRUE.
 */
function bulk_photo_nodes_recursive_set_required(&$element) {
  if (element_children($element)) {
    foreach (element_children($element) as $child) {
      $element['#required'] = TRUE;
    }
    $element['#required'] = TRUE;
  }
  else {
    $element['#required'] = TRUE;
  }
}

function bulk_photo_nodes_is_required(&$element) {
  if (element_children($element)) {
    foreach (element_children($element) as $child) {
      if($child['#required']) {
        return TRUE;
      }
      else {
        bulk_photo_nodes_is_required($element[$child]);
      }
    }
  }
  if($child['#required']) {
    return TRUE;
  }
}

function bulk_photo_nodes_add_form_ajax(&$form, &$form_state) {
  $field_name = $form_state['triggering_element']['#field_name'];
  foreach(element_children($form['nodes']) as $key) {
    if (bulk_photo_nodes_is_required($form['nodes'][$key]['right']['node'][$field_name])) {
      if (empty($form_state['triggering_element']['#value'])) {
        bulk_photo_nodes_recursive_set_required($form['nodes'][$key]['right']['node'][$field_name]);
      }
      else {
        bulk_photo_nodes_recursive_set_optional($form['nodes'][$key]['right']['node'][$field_name]);
      }
    }
  }
  return $form['nodes'];
}
