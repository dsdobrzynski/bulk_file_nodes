<?php
/**
 * @file
 * hooks and helper functions for bulk photo node.
 */

/**
 * Implements hook_menu_alter().
 */
function bulk_photo_nodes_menu_alter(&$items) {
  $bpn_var = variable_get('bulk_photo_node_types');
  if (!empty($bpn_var)) {
    foreach ($bpn_var as $node_type => $image_field) {
      $node_type = strtr($node_type, '_', '-');
      $items["node/add/$node_type"]['page callback'] = 'bulk_photo_node_page';
      $items["node/add/$node_type"]['page arguments'] = array(2);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function bulk_photo_nodes_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $form['bulk_photo_nodes'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#group' => 'additional_settings',
    '#title' => 'Bulk Photo Node Settings',
  );
  $form['bulk_photo_nodes']['image_field'] = array(
    '#type' => 'select',
    '#title' => 'Choose a field for the image',
    '#default_value' => _get_bpn_image_field($form['#node_type']->type),
    '#options' => _get_image_fields($form['#node_type']->type),
  );
  $form['#submit'][] = 'bulk_photo_nodes_submit';
}

/**
 * Submit callback for bulk_photo_nodes_form_node_type_form_alter.
 */
function bulk_photo_nodes_submit($form, &$form_state) {
  $image_field = $form_state['values']['bulk_photo_nodes']['image_field'];
  $node_type = $form['#node_type']->type;

  if (!empty($image_field)) {
    // If the user has selected a value.
    $bpn_var = variable_get('bulk_photo_node_types');

    if ($image_field == 'none') {
      if (is_array($bpn_var) && array_key_exists($node_type, $bpn_var)) {
        unset($bpn_var[$node_type]);
      }
    }
    else {
      $bpn_var[$node_type] = $image_field;
    }
    variable_set('bulk_photo_node_types', $bpn_var);
    drupal_set_message("Bulk photo node settings saved.");
  }
}

/**
 * Returns a list of image nodes for a given content type.
 *
 * @param string $node_type
 *   The name of the content type
 */
function _get_image_fields($node_type) {
  $image_fields = array(
    'none' => '- None -',
  );

  $fields_info = field_info_instances('node', $node_type);
  foreach ($fields_info as $field_name => $field_value) {
    $field_info = field_info_field($field_name);
    $type = $field_info['type'];
    if ($type == 'image') {
      $image_fields[$field_name] = $field_value['label'];
    }
  }
  return $image_fields;
}

/**
 * Indicates if a given content type is being used as bulk photo nodes.
 *
 * @param string $node_type
 *   The machine name of a content_type.
 */
function _get_bpn_image_field($node_type) {
  $bpn_var = variable_get('bulk_photo_node_types');
  if (is_array($bpn_var)) {
    return (array_key_exists($node_type, $bpn_var)) ? $bpn_var[$node_type] : 'none';
  }
}

/**
 * Implements hook_bpn_upload().
 */
function bulk_photo_nodes_bpn_upload() {
  return 'bpn_multistep_form';
}

function _form_bpn_steps() {
  return array(
      1 => array(
        'form' => 'bulk_photo_plupload',
      ),
      2 => array(
        'form' => 'bulk_photo_nodes_add',
      ),
    );
}

function bpn_multistep_form($form, &$form_state) {
  if (empty($form_state['step'])) {
    $form_state['step'] = 1;
    $form_state['step_information'] = _form_bpn_steps();
  }
  $step = &$form_state['step'];
  $form = $form_state['step_information'][$step]['form']($form, $form_state);
  if ($step > 1) {
    $form['prev'] = array(
      '#type' => 'submit',
      '#value' => t('Previous'),
      '#name' => 'prev',
      '#submit' => array('bpn_prev_submit'),
      '#limit_validation_errors' => array(),
    );
  }
  if ($step < count($form_state['step_information'])) {
    $form['next'] = array(
      '#type' => 'submit',
      '#value' => t('Next'),
      '#name' => 'next',
      '#submit' => array('bpn_next_submit'),
    );
  }
  else {
    $form['finish'] = array(
      '#type' => 'submit',
      // '#submit' => 'bpn_multistep_form_final_submit',
      '#value' => t('Finish'),
    );
  }
  return $form;
}

function bpn_prev_submit($form, &$form_state) {
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  if ($current_step > 1) {
    $current_step--;
    $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  }
  $form_state['rebuild'] = TRUE;
}

function bpn_next_submit($form, &$form_state) {
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  if ($current_step < count($form_state['step_information'])) {
    $current_step++;
    if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
      $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
    }
    else {
      $form_state['values'] = array();
    }
    $form_state['rebuild'] = TRUE;
    return;
  }
}

function bpn_finish_submit($form, &$form_state) {
}

function bulk_photo_node_page($node_type) {
  $query = drupal_get_query_parameters();
  if (is_array($query) && !array_key_exists('override', $query)) {
    $content = array();
    $forms = module_invoke_all('bpn_upload');
    foreach ($forms as $form) {
      $content[] = drupal_get_form($form);
    }
    return $content;
  }
  else {
    return drupal_render(node_add($node_type));
  }
}

function bulk_save_photos($form, &$form_state) {
  $saved_files = array();
  $scheme = variable_get('file_default_scheme', 'public') . '://';
  foreach ($form_state['step_information'][1]['stored_values']['plupload'] as $uploaded_file) {
    if ($uploaded_file['status'] == 'done') {
      $source = $uploaded_file['tmppath'];
      $destination = file_stream_wrapper_uri_normalize($scheme . $uploaded_file['name']);
      $destination = file_unmanaged_move($source, $destination, FILE_EXISTS_RENAME);
      $file = plupload_file_uri_to_object($destination);
      file_save($file);
      $form_state['values']['saved_files'][] = $file;
    }
    else {
      form_set_error('plupload', "Upload of {$uploaded_file['name']} failed");
    }
  }
}

function bulk_photo_plupload($form, &$form_state) {
  drupal_set_title(t('Upload Images'));
  $form = array(
    'plupload' => array(
      '#type' => 'plupload',
      '#required' => TRUE,
    )
  );
  return $form;
}

function bulk_photo_nodes_add($form, &$form_state) {
  drupal_set_title(t('Bulk Add Info'));
  $form = array();
  $bpn_var = variable_get('bulk_photo_node_types');
  bulk_save_photos($form, $form_state);
  $form['nodes'] = array(
    '#type' => 'fieldset',
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );
  foreach ($form_state['values']['saved_files'] as $key => $file) {
    $vars = array(
      'style_name' => 'bulk_photo_nodes',
      'path' => $file->uri,
    );
    $node = new stdClass();
    // @todo this looks bad, lets use something else to get the node type.
    $node_type = strtr(arg(2), '-', '_');
    $node->type = $node_type;
    node_object_prepare($node);
    $image_field = $bpn_var[$node_type];
    $markup = theme('image_style', $vars);
    $form['nodes'][$key] = array(
      '#type' => 'fieldset',
      '#collapsed' => FALSE,
      '#tree' => TRUE,
    );
    $form['nodes'][$key]['image'] = array(
      '#type' => 'markup',
      '#markup' => $markup,
      '#tree' => TRUE,
    );
    $form['nodes'][$key]['add_node'] = array(
      '#type' => 'fieldset',
      '#title' => 'Edit Additional Info',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
    );
    $form['node_type'] = array(
      '#type' => 'value',
      '#value' => $node_type,
    );
    $form['nodes'][$key]['add_node']['#parents'] = array(
      'nodes', $key, 'add_node',
    );

    field_attach_form('node', $node, $form['nodes'][$key]['add_node'], $form_state);
    $form['nodes'][$key]['body'] = $form['nodes'][$key]['add_node']['body'];
    unset($form['nodes'][$key]['add_node'][$image_field]);
    $form['nodes'][$key]['add_node'][$image_field]['und'][0]['#type'] = 'value';
    $form['nodes'][$key]['add_node'][$image_field]['und'][0]['#value'] = (array) $file;
    $form['nodes'][$key]['add_node']['title'] = array(
      '#type' => 'textfield',
      '#title' => 'Title',
      '#required' => TRUE,
    );
    unset($form['nodes'][$key]['add_node']['body']);
  }
  // $form['override_fields'] = array(
  //   '#parents' => array(
  //     'override_fields',
  //   ),
  //   '#tree' => TRUE,
  // );
  // $form['override_fields']['title_display'] = array(
  //   '#type' => 'markup',
  //   '#markup' => '<h2>Bulk Settings</h2><p>(applies to all photos, unless overridden)</p>',
  //   '#weight' => -10,
  // );
  // field_attach_form('node', $node, $form['override_fields'], $form_state);
  // unset($form['override_fields'][$image_field]);
  $form['#validate'][] = 'bpn_multistep_form_final_validate';
  return $form;
}

function bpn_multistep_form_submit($form, &$form_state) {
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];

  $values =& $form_state['step_information'][$current_step]['stored_values'];
  $node_count = 0;
  foreach ($values['nodes'] as $key => $node_array) {
    //Move body from to correct part of values
    $values['nodes'][$key]['add_node']['body'] = $values['nodes'][$key]['body'];
    unset($values['nodes'][$key]['body']);
    // Prepare a new node for saving
    $node = new stdClass();
    $node->type = $values['node_type'];
    node_object_prepare($node);
    foreach ($node_array['add_node'] as $field_name => $field_value) {
      // Convert values to properties of the node object.
      $node->$field_name = $field_value;
    }
    // field_attach_form_validate('node', $node, $form, $form_state); 
    node_save($node);
    if (!empty($node->nid)) {
      $node_count++;
    }
  }
  drupal_set_message("$node_count Photos saved successfully");
}
