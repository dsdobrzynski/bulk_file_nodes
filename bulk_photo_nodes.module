<?php
/**
 * @file
 * hooks and helper functions for bulk photo node.
 */

/**
 * Implements hook_permission().
 */

/**
 * Implements hook_init().
 */
// function bulk_photo_nodes_init() {
//   drupal_add_css(drupal_get_path('module', 'bulk_photo_nodes') . '/bulk_photo_nodes_default.css', array('group' => CSS_DEFAULT, 'basename' => 'bulk_photo_nodes_default.css'));
// }

/**
 * Implements hook_permission().
 */
function bulk_photo_nodes_permission() {
  return array(
    'create bulk photo nodes' => array(
      'title' => t('Create bulk photo nodes'),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function bulk_photo_nodes_menu_alter(&$items) {
  $bpn_var = variable_get('bulk_photo_node_types');
  if (!empty($bpn_var)) {
    foreach ($bpn_var as $node_type => $image_field) {
      $node_type = strtr($node_type, '_', '-');
      $items["node/add/$node_type"]['page callback'] = 'bulk_photo_node_page';
      $items['access arguments'] = array('create bulk photo nodes');
      $items["node/add/$node_type"]['page arguments'] = array(2);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function bulk_photo_nodes_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $form['bulk_photo_nodes'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#group' => 'additional_settings',
    '#title' => 'Bulk Photo Node Settings',
  );
  $form['bulk_photo_nodes']['image_field'] = array(
    '#type' => 'select',
    '#title' => 'Choose a field for the image',
    '#default_value' => _get_bpn_image_field($form['#node_type']->type),
    '#options' => _get_image_fields($form['#node_type']->type),
  );
  $form['#submit'][] = 'bulk_photo_nodes_submit';
}

/**
 * Submit callback for bulk_photo_nodes_form_node_type_form_alter.
 */
function bulk_photo_nodes_submit($form, &$form_state) {
  $image_field = $form_state['values']['bulk_photo_nodes']['image_field'];
  $node_type = $form['#node_type']->type;

  if (!empty($image_field)) {
    // If the user has selected a value.
    $bpn_var = variable_get('bulk_photo_node_types');

    if ($image_field == 'none') {
      if (is_array($bpn_var) && array_key_exists($node_type, $bpn_var)) {
        unset($bpn_var[$node_type]);
      }
    }
    else {
      $bpn_var[$node_type] = $image_field;
    }
    variable_set('bulk_photo_node_types', $bpn_var);
    drupal_set_message("Bulk photo node settings saved.");
  }
}

/**
 * Returns a list of image nodes for a given content type.
 *
 * @param string $node_type
 *   The name of the content type
 */
function _get_image_fields($node_type) {
  $image_fields = array(
    'none' => '- None -',
  );

  $fields_info = field_info_instances('node', $node_type);
  foreach ($fields_info as $field_name => $field_value) {
    $field_info = field_info_field($field_name);
    $type = $field_info['type'];
    if ($type == 'image') {
      $image_fields[$field_name] = $field_value['label'];
    }
  }
  return $image_fields;
}

/**
 * Indicates if a given content type is being used as bulk photo nodes.
 *
 * @param string $node_type
 *   The machine name of a content_type.
 */
function _get_bpn_image_field($node_type) {
  $bpn_var = variable_get('bulk_photo_node_types');
  if (is_array($bpn_var)) {
    return (array_key_exists($node_type, $bpn_var)) ? $bpn_var[$node_type] : 'none';
  }
}

/**
 * Implements hook_bpn_upload().
 *
 * This is how modules define a multi-step forms to surface.
 */
function bulk_photo_nodes_bpn_upload() {
  return 'bpn_multistep_form';
}

function _form_bpn_steps() {
  return array(
    1 => array(
      'form' => 'bulk_photo_plupload',
    ),
    2 => array(
      'form' => 'bulk_photo_nodes_add',
    ),
  );
}

function bpn_multistep_form($form, &$form_state) {
  if (empty($form_state['step'])) {
    $form_state['step'] = 1;
    $form_state['step_information'] = _form_bpn_steps();
  }
  $step = &$form_state['step'];
  // Generate form from next form builder defined in _form_bpn_steps.
  $form = $form_state['step_information'][$step]['form']($form, $form_state);
  if ($step > 1) {
    $form['prev'] = array(
      '#type' => 'submit',
      '#value' => t('Previous'),
      '#name' => 'prev',
      '#submit' => array('bpn_prev_submit'),
      '#limit_validation_errors' => array(),
    );
  }
  if ($step < count($form_state['step_information'])) {
    $form['next'] = array(
      '#type' => 'submit',
      '#value' => t('Next'),
      '#name' => 'next',
      '#validate' => array(),
      '#submit' => array('bpn_next_submit'),
    );
    if (function_exists($form_state['step_information'][$step]['form'] . '_submit')) {
      array_unshift($form['next']['#submit'], $form_state['step_information'][$step]['form'] . '_submit');
    }
    if (function_exists($form_state['step_information'][$step]['form'] . '_validate')) {
      array_unshift($form['next']['#validate'], $form_state['step_information'][$step]['form'] . '_validate');
    }
  }
  else {
    $form['finish'] = array(
      '#type' => 'submit',
      '#validate' => array(),
      '#value' => t('Finish'),
    );
    if (function_exists($form_state['step_information'][$step]['form'] . '_submit')) {
      array_unshift($form['finish']['#submit'], $form_state['step_information'][$step]['form'] . '_submit');
    }
    if (function_exists($form_state['step_information'][$step]['form'] . '_validate')) {
      array_unshift($form['finish']['#validate'], $form_state['step_information'][$step]['form'] . '_validate');
    }
  }
  return $form;
}

function bpn_prev_submit($form, &$form_state) {
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  if ($current_step > 1) {
    $current_step--;
    $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  }
  $form_state['rebuild'] = TRUE;
}

function bpn_next_submit($form, &$form_state) {
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  if ($current_step < count($form_state['step_information'])) {
    $current_step++;
    if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
      $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
    }
    else {
      $form_state['values'] = array();
    }
    $form_state['rebuild'] = TRUE;
  }
}

function bulk_photo_node_page($node_type) {
  $query = drupal_get_query_parameters();
  if (is_array($query) && !array_key_exists('override', $query)) {
    $content = array();
    $forms = module_invoke_all('bpn_upload');
    foreach ($forms as $form) {
      $content[] = drupal_get_form($form);
    }
    return $content;
  }
  else {
    $form = node_add($node_type);
    return $form;
  }
}

function bulk_photo_plupload($form, &$form_state) {
  drupal_set_title(t('Upload Images'));
  $form = array(
    'plupload' => array(
      '#type' => 'plupload',
      '#required' => TRUE,
    ),
  );
  return $form;
}

function bulk_photo_plupload_submit($form, &$form_state) {
  $saved_files = array();
  $scheme = variable_get('file_default_scheme', 'public') . '://';
  foreach ($form_state['values']['plupload'] as $uploaded_file) {
    if ($uploaded_file['status'] == 'done') {
      $source = $uploaded_file['tmppath'];
      $destination = file_stream_wrapper_uri_normalize($scheme . $uploaded_file['name']);
      $destination = file_unmanaged_move($source, $destination, FILE_EXISTS_RENAME);
      $file = plupload_file_uri_to_object($destination);
      file_save($file);
      $form_state['values']['saved_files'][] = $file;
    }
    else {
      form_set_error('plupload', "Upload of {$uploaded_file['name']} failed");
    }
  }
}

function bulk_photo_nodes_add($form, &$form_state) {
  drupal_set_title(t('Bulk Add Info'));
  $form = array();
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'bulk_photo_nodes') . '/bulk_photo_nodes_default.css',
  );
  $bpn_var = variable_get('bulk_photo_node_types');
  $form['nodes'] = array(
    '#type' => 'fieldset',
    '#collapsed' => FALSE,
    '#tree' => TRUE,
    '#attributes' => array(
      'class' => array(
        'bulk-nodes-edit',
      ),
    ),
  );
  foreach ($form_state['step_information'][1]['stored_values']['saved_files'] as $key => $file) {
    if (array_key_exists('removal', $form_state) && $form_state['removal'] == $key) {
      continue;
    }
    $vars = array(
      'style_name' => 'bulk_photo_nodes',
      'path' => $file->uri,
    );
    $node = new stdClass();
    // @todo this looks bad, lets use something else to get the node type.
    $node_type = strtr(arg(2), '-', '_');
    $node->type = $node_type;
    node_object_prepare($node);
    $image_field = $bpn_var[$node_type];
    $markup = theme('image_style', $vars);
    $form['nodes'][$key] = array(
      '#type' => 'fieldset',
      '#collapsed' => FALSE,
      '#tree' => TRUE,
      '#prefix' => "<div id=nodes-{$key}-wrapper>",
      '#suffix' => "</div>",
    );
    $form['nodes'][$key]['image'] = array(
      '#type' => 'markup',
      '#markup' => $markup,
      '#tree' => TRUE,
    );
    $form['nodes'][$key]["delete_{$key}"] = array(
      '#type' => 'submit',
      '#value' => 'Delete',
      '#name' => $key,
      '#limit_validation_errors' => array(),
      '#validate' => array('bulk_photo_nodes_add_validate'),
      '#submit' => array('bpn_delete_node'),
    );
    $form['nodes'][$key]['node'] = array(
      '#type' => 'fieldset',
      '#title' => 'Edit Additional Info',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
    );
    $form['node_type'] = array(
      '#type' => 'value',
      '#value' => $node_type,
    );
    $form['nodes'][$key]['node']['#parents'] = array(
      'nodes', $key, 'node',
    );
    // Attach all fields found in the node form.
    field_attach_form('node', $node, $form['nodes'][$key]['node'], $form_state);
    // Move around body field, create a title form item.
    $form['nodes'][$key]['body'] = $form['nodes'][$key]['node']['body'];
    unset($form['nodes'][$key]['node'][$image_field]);
    $form['nodes'][$key]['node'][$image_field]['und'][0]['#type'] = 'value';
    $form['nodes'][$key]['node'][$image_field]['und'][0]['#value'] = (array) $file;
    $form['nodes'][$key]['title'] = array(
      '#type' => 'textfield',
      '#title' => 'Title',
      '#required' => TRUE,
    );
    unset($form['nodes'][$key]['node']['body']);
  }
  $form['override_fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Bulk Settings'),
    '#attributes' => array(
      'class' => array(
        'bulk-info',
      ),
    ),
  );
  $form['override_fields']['fields'] = array(
    '#parents' => array(
      'override_fields', 'fields',
    ),
    '#tree' => TRUE,
  );
  $form['override_fields']['fields']['title_display'] = array(
    '#type' => 'markup',
    '#markup' => '<p>(applies to all photos, unless overridden)</p>',
    '#weight' => -10,
  );
  field_attach_form('node', $node, $form['override_fields']['fields'], $form_state);
  unset($form['override_fields']['fields'][$image_field]);
  return $form;
}

function bulk_photo_nodes_add_validate($form, &$form_state) {
  // $form_state['removal'] = 
  // form_error($form, 'This is an error');
  // return FALSE;
}

function bpn_multistep_form_submit($form, &$form_state) {
  // set the values for the current step.
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];

  // Convenience short aliases.
  $node_type = $form_state['step_information'][$current_step]['stored_values']['node_type'];
  $nodes =& $form_state['step_information'][$current_step]['stored_values']['nodes'];
  $node_overrides =& $form_state['step_information'][$current_step]['stored_values']['override_fields']['fields'];

  $node_count = 0;
  foreach ($nodes as $key => $outer_node) {
    if (bpn_save_node($node_type, $outer_node, $node_overrides)) {
      $node_count++;
    }
  }
  drupal_set_message("$node_count Photos saved successfully");
}

function bpn_set_state(&$form, $key) {
  foreach (element_children($form['nodes'][$key]['node']) as $field_name) {
    // Iterate through each field.
    if (!empty($form['nodes'][$key]['node'][$field_name][LANGUAGE_NONE]['#required'])) {
      $state_id = "#edit-override-fields-" . strtr($field_name, '_', '-') . "-und-0-value";
      $state_condition = array(
        'required' => array(
          $state_id => array(),
        ),
        'optional' => array(
          $state_id => array(),
        ),
      );
      if (!empty($form['nodes'][$key]['node'][$field_name][LANGUAGE_NONE]['#type'])) {
        switch ($form['nodes'][$key]['node'][$field_name][LANGUAGE_NONE]['#type']) {
          case 'textfield':
            $state_condition['required'][$state_id]['filled'] = false;
            $state_condition['optional'][$state_id]['filled'] = true;
            break;

          case 'select':
            $state_condition['required'][$state_id]['value'] = false;
            $state_condition['optional'][$state_id]['value'] = true;
            break;
        }
      }
      $form['nodes'][$key]['node'][$field_name]['#states'] = $state_condition;
    }
  }
}

function bpn_delete_node($form, &$form_state) {
  $key = $form_state['triggering_element']['#name'];
  $form_state['removal'] = $key;
  $form_state['rebuild'] = TRUE;
}

/**
 * Save an individual bulk_photo_node.
 *
 * @param string $node_type
 *   The content type of the node.
 *
 * @param array $node_fields
 *   The fields of the given node.
 *
 * @param array $node_overrides
 *   Fields that will override $node_fields if they are empty.
 *
 * @return bool
 *   TRUE if the node was saved successfully, FALSE otherwise.
 */
function bpn_save_node($node_type, $node_fields, $node_overrides) {
  // Prepare a new node for saving
  $node_fields['node']['body'] = $node_fields['body'];
  $node_fields['node']['title'] = $node_fields['title'];
  $node = new stdClass();
  $node->type = $node_type;
  node_object_prepare($node);

  foreach ($node_fields['node'] as $field_name => $field_values) {
    // Iterate through fields. Convert form values to properties of the node.
    $node->$field_name = $field_values;
    if (!empty($field_values[LANGUAGE_NONE]) && count($field_values[LANGUAGE_NONE]) > 1) {
      // This is a mult-value field. Iterate through it.
      foreach ($field_values[LANGUAGE_NONE] as $key => $field) {
        if (!empty($field['value'])) {
          if (!empty($node_overrides[$field_name][LANGUAGE_NONE][$key])) {
            $node->$field_name[LANGUAGE_NONE][$key] = $node_overrides[$field_name][LANGUAGE_NONE][$key];
          }
        }
      }
    }
    elseif (!empty($field_values[LANGUAGE_NONE]) && count($field_values[LANGUAGE_NONE]) == 1) {
      // This is a single value field.
      if (!empty($node_overrides[$field_name][LANGUAGE_NONE][0]['value'])) {
        $node->$field_name = $node_overrides[$field_name];
      }
    }
  }
  node_save($node);
  return (!empty($node->nid)) ? TRUE : FALSE;
}
